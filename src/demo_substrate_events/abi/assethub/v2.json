[
  {
    "name": "System",
    "prefix": "System",
    "storage": [
      {
        "name": "Account",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "frame_system:AccountInfo",
            "keys_id": 0,
            "value_id": 3
          }
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " The full account information for a particular account ID."
        ]
      },
      {
        "name": "ExtrinsicCount",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": [
          " Total extrinsics count for the current block."
        ]
      },
      {
        "name": "BlockWeight",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "frame_support:weights:PerDispatchClass@6",
          "PlainTypeValue": 6
        },
        "fallback": "0x000000000000000000000000000000000000000000000000",
        "docs": [
          " The current weight for the block."
        ]
      },
      {
        "name": "AllExtrinsicsLen",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": [
          " Total length (in bytes) for all extrinsics put together, for the current block."
        ]
      },
      {
        "name": "BlockHash",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "H256",
            "keys_id": 4,
            "value_id": 8
          }
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " Map of block numbers to block hashes."
        ]
      },
      {
        "name": "ExtrinsicData",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Vec<U8>",
            "keys_id": 4,
            "value_id": 9
          }
        },
        "fallback": "0x00",
        "docs": [
          " Extrinsics data for the current block (maps an extrinsic's index to its data)."
        ]
      },
      {
        "name": "Number",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The current block number being processed. Set by `execute_block`."
        ]
      },
      {
        "name": "ParentHash",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "H256",
          "PlainTypeValue": 8
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " Hash of the previous block."
        ]
      },
      {
        "name": "Digest",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<sp_runtime:generic:digest:DigestItem>",
          "PlainTypeValue": 10
        },
        "fallback": "0x00",
        "docs": [
          " Digest of the current block, also part of the block header."
        ]
      },
      {
        "name": "Events",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<frame_system:EventRecord>",
          "PlainTypeValue": 17
        },
        "fallback": "0x00",
        "docs": [
          " Events deposited for the current block.",
          "",
          " NOTE: This storage item is explicitly unbounded since it is never intended to be read",
          " from within the runtime."
        ]
      },
      {
        "name": "EventCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The number of events in the `Events<T>` list."
        ]
      },
      {
        "name": "EventTopics",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "Vec<Tuple:U32U32>",
            "keys_id": 8,
            "value_id": 34
          }
        },
        "fallback": "0x00",
        "docs": [
          " Mapping between a topic (represented by T::Hash) and a vector of indexes",
          " of events in the `<Events<T>>` list.",
          "",
          " All topic vectors have deterministic storage locations depending on the topic. This",
          " allows light-clients to leverage the changes trie storage tracking mechanism and",
          " in case of changes fetch the list of events of interest.",
          "",
          " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
          " the `EventIndex` then in case if the topic has the same contents on the next block",
          " no notification will be triggered thus the event might be lost."
        ]
      },
      {
        "name": "LastRuntimeUpgrade",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "frame_system:LastRuntimeUpgradeInfo",
          "PlainTypeValue": 36
        },
        "fallback": "0x00",
        "docs": [
          " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
        ]
      },
      {
        "name": "UpgradedToU32RefCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 39
        },
        "fallback": "0x00",
        "docs": [
          " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
        ]
      },
      {
        "name": "UpgradedToTripleRefCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 39
        },
        "fallback": "0x00",
        "docs": [
          " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
          " (default) if not."
        ]
      },
      {
        "name": "ExecutionPhase",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "frame_system:Phase",
          "PlainTypeValue": 32
        },
        "fallback": "0x00",
        "docs": [
          " The execution phase of the block."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "0000",
        "name": "fill_block",
        "docs": [
          "A dispatch that will fill the block weight up to the given ratio."
        ],
        "args": [
          {
            "name": "ratio",
            "type": "U32",
            "type_name": "Perbill"
          }
        ]
      },
      {
        "lookup": "0001",
        "name": "remark",
        "docs": [
          "Make some on-chain remark.",
          "",
          "# <weight>",
          "- `O(1)`",
          "# </weight>"
        ],
        "args": [
          {
            "name": "remark",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "0002",
        "name": "set_heap_pages",
        "docs": [
          "Set the number of pages in the WebAssembly environment's heap.",
          "",
          "# <weight>",
          "- `O(1)`",
          "- 1 storage write.",
          "0x2d2042617365205765696768743a20312e34303520c2b573",
          "- 1 write to HEAP_PAGES",
          "- 1 digest item",
          "# </weight>"
        ],
        "args": [
          {
            "name": "pages",
            "type": "U64",
            "type_name": "u64"
          }
        ]
      },
      {
        "lookup": "0003",
        "name": "set_code",
        "docs": [
          "Set the new runtime code.",
          "",
          "# <weight>",
          "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
          "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is",
          "  expensive).",
          "- 1 storage write (codec `O(C)`).",
          "- 1 digest item.",
          "- 1 event.",
          "The weight of this function is dependent on the runtime, but generally this is very",
          "expensive. We will treat this as a full block.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "code",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "0004",
        "name": "set_code_without_checks",
        "docs": [
          "Set the new runtime code without doing any checks of the given `code`.",
          "",
          "# <weight>",
          "- `O(C)` where `C` length of `code`",
          "- 1 storage write (codec `O(C)`).",
          "- 1 digest item.",
          "- 1 event.",
          "The weight of this function is dependent on the runtime. We will treat this as a full",
          "block. # </weight>"
        ],
        "args": [
          {
            "name": "code",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "0005",
        "name": "set_changes_trie_config",
        "docs": [
          "Set the new changes trie configuration.",
          "",
          "# <weight>",
          "- `O(1)`",
          "- 1 storage write or delete (codec `O(1)`).",
          "- 1 call to `deposit_log`: Uses `append` API, so O(1)",
          "0x2d2042617365205765696768743a20372e32313820c2b573",
          "- DB Weight:",
          "    - Writes: Changes Trie, System Digest",
          "# </weight>"
        ],
        "args": [
          {
            "name": "changes_trie_config",
            "type": "option<sp_core:changes_trie:ChangesTrieConfiguration>",
            "type_name": "Option<ChangesTrieConfiguration>"
          }
        ]
      },
      {
        "lookup": "0006",
        "name": "set_storage",
        "docs": [
          "Set some items of storage.",
          "",
          "# <weight>",
          "- `O(I)` where `I` length of `items`",
          "- `I` storage writes (`O(1)`).",
          "0x2d2042617365205765696768743a20302e353638202a206920c2b573",
          "- Writes: Number of items",
          "# </weight>"
        ],
        "args": [
          {
            "name": "items",
            "type": "Vec<Tuple:Vec<U8>Vec<U8>>",
            "type_name": "Vec<KeyValue>"
          }
        ]
      },
      {
        "lookup": "0007",
        "name": "kill_storage",
        "docs": [
          "Kill some items from storage.",
          "",
          "# <weight>",
          "- `O(IK)` where `I` length of `keys` and `K` length of one key",
          "- `I` storage deletions.",
          "0x2d2042617365205765696768743a202e333738202a206920c2b573",
          "- Writes: Number of items",
          "# </weight>"
        ],
        "args": [
          {
            "name": "keys",
            "type": "Vec<Vec<U8>>",
            "type_name": "Vec<Key>"
          }
        ]
      },
      {
        "lookup": "0008",
        "name": "kill_prefix",
        "docs": [
          "Kill all storage items with a key that starts with the given prefix.",
          "",
          "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
          "the prefix we are removing to accurately calculate the weight of this function.",
          "",
          "# <weight>",
          "- `O(P)` where `P` amount of keys with prefix `prefix`",
          "- `P` storage deletions.",
          "0x2d2042617365205765696768743a20302e383334202a205020c2b573",
          "- Writes: Number of subkeys + 1",
          "# </weight>"
        ],
        "args": [
          {
            "name": "prefix",
            "type": "Vec<U8>",
            "type_name": "Key"
          },
          {
            "name": "subkeys",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "0009",
        "name": "remark_with_event",
        "docs": [
          "Make some on-chain remark and emit event.",
          "",
          "# <weight>",
          "- `O(b)` where b is the length of the remark.",
          "- 1 event.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "remark",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 40
    },
    "events": [
      {
        "lookup": "0000",
        "name": "ExtrinsicSuccess",
        "docs": [
          "An extrinsic completed successfully. \\[info\\]"
        ],
        "args": [
          "frame_support:weights:DispatchInfo"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "DispatchInfo"
        ]
      },
      {
        "lookup": "0001",
        "name": "ExtrinsicFailed",
        "docs": [
          "An extrinsic failed. \\[error, info\\]"
        ],
        "args": [
          "sp_runtime:DispatchError",
          "frame_support:weights:DispatchInfo"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "DispatchError",
          "DispatchInfo"
        ]
      },
      {
        "lookup": "0002",
        "name": "CodeUpdated",
        "docs": [
          "`:code` was updated."
        ],
        "args": null
      },
      {
        "lookup": "0003",
        "name": "NewAccount",
        "docs": [
          "A new \\[account\\] was created."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "0004",
        "name": "KilledAccount",
        "docs": [
          "An \\[account\\] was reaped."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "0005",
        "name": "Remarked",
        "docs": [
          "On on-chain remark happened. \\[origin, remark_hash\\]"
        ],
        "args": [
          "AccountId",
          "H256"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "AccountId",
          "Hash"
        ]
      }
    ],
    "events_value": {
      "type": 20
    },
    "constants": [
      {
        "name": "BlockWeights",
        "type": "frame_system:limits:BlockWeights",
        "type_value": 45,
        "constants_value": "00f2052a010000000088526a74000000405973070000000001c0180fa44b0000000100e6bd4f57000000010000000000000000405973070000000001c0baa3be68000000010088526a740000000100a2941a1d0000004059730700000000000000",
        "docs": [
          " Block & extrinsics weights: base values and limits."
        ]
      },
      {
        "name": "BlockLength",
        "type": "frame_support:weights:PerDispatchClass@50",
        "type_value": 49,
        "constants_value": "00003c000000500000005000",
        "docs": [
          " The maximum length of a block (in bytes)."
        ]
      },
      {
        "name": "BlockHashCount",
        "type": "U32",
        "type_value": 4,
        "constants_value": "fa000000",
        "docs": [
          " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
        ]
      },
      {
        "name": "DbWeight",
        "type": "frame_support:weights:RuntimeDbWeight",
        "type_value": 51,
        "constants_value": "00000000000000000000000000000000",
        "docs": [
          " The weight of runtime database operations the runtime can invoke."
        ]
      },
      {
        "name": "Version",
        "type": "sp_version:RuntimeVersion",
        "type_value": 52,
        "constants_value": "147368656c6c147368656c6c0100000002000000000000001cdf6acb689907609b0300000037e397fc7c91f5e40100000040fe3ad401f8959a05000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ea93e3f16f3d69620100000001000000",
        "docs": [
          " Get the chain's current version."
        ]
      },
      {
        "name": "SS58Prefix",
        "type": "U16",
        "type_value": 56,
        "constants_value": "2a00",
        "docs": [
          " The designated SS85 prefix of this chain.",
          "",
          " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
          " that the runtime should know about the prefix in order to make use of it as",
          " an identifier of the chain."
        ]
      }
    ],
    "errors": [
      {
        "name": "InvalidSpecName",
        "doc": [
          "The name of specification does not match between the current runtime",
          "and the new runtime."
        ]
      },
      {
        "name": "SpecVersionNeedsToIncrease",
        "doc": [
          "The specification version is not allowed to decrease between the current runtime",
          "and the new runtime."
        ]
      },
      {
        "name": "FailedToExtractRuntimeVersion",
        "doc": [
          "Failed to extract the runtime version from the new runtime.",
          "",
          "Either calling `Core_version` or decoding `RuntimeVersion` failed."
        ]
      },
      {
        "name": "NonDefaultComposite",
        "doc": [
          "Suicide called when the account has non-default composite data."
        ]
      },
      {
        "name": "NonZeroRefCount",
        "doc": [
          "There is a non-zero reference count preventing the account from being purged."
        ]
      }
    ],
    "errors_value": {
      "type": 57
    },
    "index": 0
  },
  {
    "name": "ParachainSystem",
    "prefix": "ParachainSystem",
    "storage": [
      {
        "name": "PendingRelayChainBlockNumber",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": [
          " We need to store the new validation function for the span between",
          " setting it and applying it. If it has a",
          " value, then [`PendingValidationCode`] must have a real value, and",
          " together will coordinate the block number where the upgrade will happen."
        ]
      },
      {
        "name": "PendingValidationCode",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U8>",
          "PlainTypeValue": 9
        },
        "fallback": "0x00",
        "docs": [
          " The new validation function we will upgrade to when the relay chain",
          " reaches [`PendingRelayChainBlockNumber`]. A real validation function must",
          " exist here as long as [`PendingRelayChainBlockNumber`] is set."
        ]
      },
      {
        "name": "ValidationData",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "polkadot_primitives:v1:PersistedValidationData",
          "PlainTypeValue": 58
        },
        "fallback": "0x00",
        "docs": [
          " The [`PersistedValidationData`] set for this block."
        ]
      },
      {
        "name": "DidSetValidationCode",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 39
        },
        "fallback": "0x00",
        "docs": [
          " Were the validation data set to notify the relay chain?"
        ]
      },
      {
        "name": "LastUpgrade",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The last relay parent block number at which we signalled the code upgrade."
        ]
      },
      {
        "name": "RelevantMessagingState",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "cumulus_pallet_parachain_system:relay_state_snapshot:MessagingStateSnapshot",
          "PlainTypeValue": 60
        },
        "fallback": "0x00",
        "docs": [
          " The snapshot of some state related to messaging relevant to the current parachain as per",
          " the relay parent.",
          "",
          " This field is meant to be updated each block with the validation data inherent. Therefore,",
          " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
          "",
          " This data is also absent from the genesis."
        ]
      },
      {
        "name": "HostConfiguration",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "polkadot_primitives:v1:AbridgedHostConfiguration",
          "PlainTypeValue": 66
        },
        "fallback": "0x00",
        "docs": [
          " The parachain host configuration that was obtained from the relay parent.",
          "",
          " This field is meant to be updated each block with the validation data inherent. Therefore,",
          " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
          "",
          " This data is also absent from the genesis."
        ]
      },
      {
        "name": "LastDmqMqcHead",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "H256",
          "PlainTypeValue": 67
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " The last downward message queue chain head we have observed.",
          "",
          " This value is loaded before and saved after processing inbound downward messages carried",
          " by the system inherent."
        ]
      },
      {
        "name": "LastHrmpMqcHeads",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Tuple:U32H256>",
          "PlainTypeValue": 68
        },
        "fallback": "0x00",
        "docs": [
          " The message queue chain heads we have observed per each channel incoming channel.",
          "",
          " This value is loaded before and saved after processing inbound downward messages carried",
          " by the system inherent."
        ]
      },
      {
        "name": "ProcessedDownwardMessages",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Number of downward messages processed in a block.",
          "",
          " This will be cleared in `on_initialize` of each new block."
        ]
      },
      {
        "name": "NewValidationCode",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U8>",
          "PlainTypeValue": 9
        },
        "fallback": "0x00",
        "docs": [
          " New validation code that was set in a block.",
          "",
          " This will be cleared in `on_initialize` of each new block if no other pallet already set",
          " the value."
        ]
      },
      {
        "name": "HrmpWatermark",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " HRMP watermark that was set in a block.",
          "",
          " This will be cleared in `on_initialize` of each new block."
        ]
      },
      {
        "name": "HrmpOutboundMessages",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<polkadot_core_primitives:OutboundHrmpMessage>",
          "PlainTypeValue": 71
        },
        "fallback": "0x00",
        "docs": [
          " HRMP messages that were sent in a block.",
          "",
          " This will be cleared in `on_initialize` of each new block."
        ]
      },
      {
        "name": "UpwardMessages",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Vec<U8>>",
          "PlainTypeValue": 44
        },
        "fallback": "0x00",
        "docs": [
          " Upward messages that were sent in a block.",
          "",
          " This will be cleared in `on_initialize` of each new block."
        ]
      },
      {
        "name": "PendingUpwardMessages",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Vec<U8>>",
          "PlainTypeValue": 44
        },
        "fallback": "0x00",
        "docs": [
          " Upward messages that are still pending and not yet send to the relay chain."
        ]
      },
      {
        "name": "AnnouncedHrmpMessagesPerCandidate",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
          " announcing the weight of `on_initialize` and `on_finalize`."
        ]
      },
      {
        "name": "ReservedXcmpWeightOverride",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U64",
          "PlainTypeValue": 7
        },
        "fallback": "0x00",
        "docs": [
          " The weight we reserve at the beginning of the block for processing XCMP messages. This",
          " overrides the amount set in the Config trait."
        ]
      },
      {
        "name": "ReservedDmpWeightOverride",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U64",
          "PlainTypeValue": 7
        },
        "fallback": "0x00",
        "docs": [
          " The weight we reserve at the beginning of the block for processing DMP messages. This",
          " overrides the amount set in the Config trait."
        ]
      },
      {
        "name": "AuthorizedUpgrade",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "H256",
          "PlainTypeValue": 8
        },
        "fallback": "0x00",
        "docs": [
          " The next authorized upgrade, if there is one."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "0100",
        "name": "set_upgrade_block",
        "docs": [
          "Force an already scheduled validation function upgrade to happen on a particular block.",
          "",
          "Note that coordinating this block for the upgrade has to happen independently on the",
          "relay chain and this parachain. Synchronizing the block for the upgrade is sensitive,",
          "and this bypasses all checks and and normal protocols. Very easy to brick your chain",
          "if done wrong."
        ],
        "args": [
          {
            "name": "relay_chain_block",
            "type": "U32",
            "type_name": "RelayChainBlockNumber"
          }
        ]
      },
      {
        "lookup": "0101",
        "name": "set_validation_data",
        "docs": [
          "Set the current validation data.",
          "",
          "This should be invoked exactly once per block. It will panic at the finalization",
          "phase if the call was not invoked.",
          "",
          "The dispatch origin for this call must be `Inherent`",
          "",
          "As a side effect, this function upgrades the current validation function",
          "if the appropriate time has come."
        ],
        "args": [
          {
            "name": "data",
            "type": "cumulus_primitives_parachain_inherent:ParachainInherentData",
            "type_name": "ParachainInherentData"
          }
        ]
      },
      {
        "lookup": "0102",
        "name": "sudo_send_upward_message",
        "docs": null,
        "args": [
          {
            "name": "message",
            "type": "Vec<U8>",
            "type_name": "UpwardMessage"
          }
        ]
      },
      {
        "lookup": "0103",
        "name": "authorize_upgrade",
        "docs": null,
        "args": [
          {
            "name": "code_hash",
            "type": "H256",
            "type_name": "Hash"
          }
        ]
      },
      {
        "lookup": "0104",
        "name": "enact_authorized_upgrade",
        "docs": null,
        "args": [
          {
            "name": "code",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 73
    },
    "events": [
      {
        "lookup": "0100",
        "name": "ValidationFunctionStored",
        "docs": [
          "The validation function has been scheduled to apply as of the contained relay chain",
          "block number."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "RelayChainBlockNumber"
        ]
      },
      {
        "lookup": "0101",
        "name": "ValidationFunctionApplied",
        "docs": [
          "The validation function was applied as of the contained relay chain block number."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "RelayChainBlockNumber"
        ]
      },
      {
        "lookup": "0102",
        "name": "UpgradeAuthorized",
        "docs": [
          "An upgrade has been authorized."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "Hash"
        ]
      },
      {
        "lookup": "0103",
        "name": "DownwardMessagesReceived",
        "docs": [
          "Some downward messages have been received and will be processed.",
          "\\[ count \\]"
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "u32"
        ]
      },
      {
        "lookup": "0104",
        "name": "DownwardMessagesProcessed",
        "docs": [
          "Downward messages were processed using the given weight.",
          "\\[ weight_used, result_mqc_head \\]"
        ],
        "args": [
          "U64",
          "H256"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "Weight",
          "relay_chain::Hash"
        ]
      }
    ],
    "events_value": {
      "type": 27
    },
    "errors": [
      {
        "name": "OverlappingUpgrades",
        "doc": [
          "Attempt to upgrade validation function while existing upgrade pending"
        ]
      },
      {
        "name": "ProhibitedByPolkadot",
        "doc": [
          "Polkadot currently prohibits this parachain from upgrading its validation function"
        ]
      },
      {
        "name": "TooBig",
        "doc": [
          "The supplied validation function has compiled into a blob larger than Polkadot is",
          "willing to run"
        ]
      },
      {
        "name": "ValidationDataNotAvailable",
        "doc": [
          "The inherent which supplies the validation data did not run this block"
        ]
      },
      {
        "name": "HostConfigurationNotAvailable",
        "doc": [
          "The inherent which supplies the host configuration did not run this block"
        ]
      },
      {
        "name": "NotScheduled",
        "doc": [
          "No validation function upgrade is currently scheduled."
        ]
      },
      {
        "name": "NothingAuthorized",
        "doc": [
          "No code upgrade has been authorized."
        ]
      },
      {
        "name": "Unauthorized",
        "doc": [
          "The given code upgrade has not been authorized."
        ]
      }
    ],
    "errors_value": {
      "type": 83
    },
    "index": 1
  },
  {
    "name": "ParachainInfo",
    "prefix": "ParachainInfo",
    "storage": [
      {
        "name": "ParachainId",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 63
        },
        "fallback": "0x64000000",
        "docs": null
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 2
  },
  {
    "name": "CumulusXcm",
    "prefix": "CumulusXcm",
    "storage": null,
    "calls_value": {
      "type": 84
    },
    "events": [
      {
        "lookup": "0300",
        "name": "InvalidFormat",
        "docs": [
          "Downward message is invalid XCM.",
          "\\[ id \\]"
        ],
        "args": [
          "[U8; 8]"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "[u8; 8]"
        ]
      },
      {
        "lookup": "0301",
        "name": "UnsupportedVersion",
        "docs": [
          "Downward message is unsupported version of XCM.",
          "\\[ id \\]"
        ],
        "args": [
          "[U8; 8]"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "[u8; 8]"
        ]
      },
      {
        "lookup": "0302",
        "name": "ExecutedDownward",
        "docs": [
          "Downward message executed with the given outcome.",
          "\\[ id, outcome \\]"
        ],
        "args": [
          "[U8; 8]",
          "xcm:v2:traits:Outcome"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "[u8; 8]",
          "Outcome"
        ]
      }
    ],
    "events_value": {
      "type": 28
    },
    "errors": null,
    "errors_value": {
      "type": 85
    },
    "index": 3
  }
]